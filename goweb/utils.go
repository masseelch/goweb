package goweb

import (
	"bytes"
	"github.com/jinzhu/inflection"
	"io"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"
	"text/template"
)

const generatedFileWarningComment = `
// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{.Timestamp}}
`

var (
	matchFirstCap        = regexp.MustCompile("(.)([A-Z][a-z]+)")
	matchAllCap          = regexp.MustCompile("([a-z0-9])([A-Z])")
	matchGoFile          = regexp.MustCompile("(.)\\.go$")
	matchGeneratedGoFile = regexp.MustCompile("(.)\\.g\\.go$")
	funcMap              = template.FuncMap{
		"ToLower": strings.ToLower,
		"Plural":  inflection.Plural,
	}
)

func toSnakeCase(str string) string {
	snake := matchFirstCap.ReplaceAllString(str, "${1}_${2}")
	snake = matchAllCap.ReplaceAllString(snake, "${1}_${2}")
	return strings.ToLower(snake)
}

func parseTemplate(path string) (*template.Template, error) {
	var tpl []byte
	if strings.HasPrefix(path, "http") {
		var buf bytes.Buffer
		r, err := http.Get(path)
		if err != nil {
			return nil, err
		}
		_, err = io.Copy(&buf, r.Body)
		if err != nil {
			return nil, err
		}
		defer r.Body.Close()
		tpl = buf.Bytes()
	} else {
		var err error
		tpl, err = ioutil.ReadFile(path)
		if err != nil {
			return nil, err
		}
	}
	return template.Must(template.New("").Funcs(funcMap).Parse(generatedFileWarningComment + string(tpl))), nil
}